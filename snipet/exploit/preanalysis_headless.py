#Dump the result of analysis while headless analysis.
#@author smallkirby
#@category headless_log
#@keybinding
#@menupath
#@toolbar


import os 
from __builtin__ import True, None
from ghidra.app.decompiler import DecompInterface
from pickle import TRUE

target_words = ["flag", "cat", "exec", "system", "win", "bash", "/bin/sh"]

def get_compiler_spec():
  return currentProgram.getCompilerSpec().getCompilerSpecID().toString()

def get_function_count():
  return currentProgram.getFunctionManager().getFunctionCount()

def get_import_api_count():
  ext_symbols = currentProgram.getSymbolTable().getExternalSymbols()
  return len(list(ext_symbols))

def get_defined_data_count():
  exec_memsets = currentProgram.getMemory().getExecuteSet()
  data = currentProgram.getListing().getData(exec_memsets, True)
  return sum([len(d.getBytes()) for d in data if d.isDefined()])

def _decompile_func(decompiler, func):
  decomp_status = decompiler.decompileFunction(func, 0, None)
  if decomp_status and decomp_status.decompileCompleted():
    decompiled_func = decomp_status.getDecompiledFunction()
    if decompiled_func:
      return decompiled_func.getC()
    
def _decompile():
  decompiler = DecompInterface()
  decompiler.openProgram(currentProgram)
  
  de_c = ""
  funcs = currentProgram.getListing().getFunctions(True)
  for func in funcs:
    decompiled_func = _decompile_func(decompiler, func)
    if decompiled_func:
      de_c += decompiled_func

  return de_c

def check_decompiled(pd_c):
  found_words = []
  for word in target_words:
    if word in pd_c:
      found_words += [word]
  
  with open("commoncheck_result.txt", "w+") as fw:
    for word in found_words:
      fw.write("[!] FOUND!: {}\n".format(word))

def basicinfo_main():
  stats = dict()
  
  stats["name"] = os.path.basename(currentProgram.getExecutablePath())
  stats["sha256"] = currentProgram.getExecutableSHA256()
  stats["language"] = currentProgram.getLanguageID().toString()
  stats["compiler_spec"] = get_compiler_spec()
  stats["function_count"] = get_function_count()
  stats["import_api_count"] = get_import_api_count()
  stats["defined_data_count"] = get_defined_data_count()
  
  with open("basicinfo_result.txt", "w") as fw:
    fw.write("** IN DECOMPILED CODE **\n")
    for key, value in stats.items():
      fw.write("{}: {}\n".format(key, value))
    fw.write("************************\n")

def decompile_main():
  cur_program_name = os.path.basename(currentProgram.getExecutablePath())
  output = "decompiled.c"
  pd_c = _decompile()
  
  check_decompiled(pd_c)
    
  print("[+] decompiling to C")
  with open(output, "w") as fw:
    fw.write(pd_c)
    print("[+] Success decompile into : {}".format(output))
    
def searchmem_main():
  with open("commoncheck_result.txt", "w+") as fw:
    fw.write("** IN MEMORY **\n")
    for word in target_words:
      founds = findBytes(None, word, -1)
      for a in founds:
        fw.write("[!] FOUND!: {}\n".format(word))
    fw.write("************************\n")
  


def main():
  basicinfo_main()
  decompile_main()
  searchmem_main()
    
    
if __name__ == "__main__":
  main()
